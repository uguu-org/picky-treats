#!/usr/bin/perl -w
# Convert the coordinate values generated by generate_collision_table.pl
# to SVG paths.  This is to verify that we got the dimensions right.
#
# perl generate_collision_table.pl | perl collision_table_to_svg.pl > out.svg

use strict;
use constant ROTATION_STEPS => 36;

# Output SVG header.
print <<EOT;
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->
<svg
   width="2048"
   height="2048"
   viewBox="0 0 2048 2048"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
EOT

# Output paths.
my $x = 64;
my $y = 64;
my @quad = ();
while( my $line = <> )
{
   if( $line =~ /^\s*\{([^,]+), ([^}]+)\}/ )
   {
      push @quad, [$1, $2];
      if( (scalar @quad) == 4 )
      {
         # Draw quad.
         my $d;
         for(my $i = 0; $i < 4; $i++)
         {
            if( $i == 0 )
            {
               $d = "M " . ($x + $quad[0][0]) . "," . ($y + $quad[0][1]);
            }
            else
            {
               $d .= " L " . ($x + $quad[$i][0]) . "," . ($y + $quad[$i][1]);
            }
         }
         $d .= " z";
         print "\t<path d=\"$d\" style=\"fill:none;stroke:#ff0000;stroke-width:1\" />\n";

         # Reset for next quad.
         @quad = ();
         $x += 128;
         if( $x > ROTATION_STEPS * 128 )
         {
            $x = 64;
            $y += 128 * 6;
         }
      }
   }
}

# Output SVG footer.
print <<EOT;
</svg>
EOT
